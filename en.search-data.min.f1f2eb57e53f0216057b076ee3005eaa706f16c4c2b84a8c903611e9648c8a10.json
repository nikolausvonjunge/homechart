[{"id":0,"href":"/installing-homechart/client/android/","title":"Android","section":"Client","content":" Android # Download the app on the Play Store to get started with Homechart on Android.\nConnecting to Self-Hosted Instances # Tick the \u0026ldquo;Self-Hosted Server\u0026rdquo; button on the Sign In or Sign Up page to connect to your self-hosted instance. Fill in the address of your self-hosted instance (e.g. https://web.homechart.app).\nHomechart on Android is actually the web version, just repackaged as something called a Trusted Web Activity. Our household uses Android devices, so Android receives a lot of \u0026ldquo;extended testing\u0026rdquo; by us. "},{"id":1,"href":"/installing-homechart/server/in-the-cloud/","title":"In The Cloud (Hosted)","section":"Server","content":" In The Cloud (Hosted) # Visit https://web.homechart.app/signup and signup for a new account to start using Homechart in the cloud.\nOur household uses Homechart Cloud! "},{"id":2,"href":"/installing-homechart/server/on-your-network/","title":"On Your Network (Self-Hosted)","section":"Server","content":" Homechart On Your Network (Self Hosted) # Choose an installation method to install Homechart on your network:\nUsing a binary, and run it with a service manager like systemd Using a container, and run it with a container runtime like Docker "},{"id":3,"href":"/installing-homechart/server/on-your-network/installation/requirements/","title":"Requirements","section":"Installation","content":" Requirements # 1. Server # The server component of Homechart is written in Go and has very low resource requirements:\n1 CPU 512MB RAM 2. Database # Homechart requires full access to a PostgreSQL 14 database. Older or newer versions may work, but they are not tested.\nYou can create a database for Homechart on an existing PostgreSQL server with these commands, replacing the database name, username and password:\nCREATE DATABASE homechart; CREATE ROLE \u0026#34;homechart\u0026#34; WITH CREATEDB LOGIN PASSWORD \u0026#39;homechart\u0026#39;; REVOKE ALL PRIVILEGES ON SCHEMA public FROM public; GRANT ALL PRIVILEGES ON DATABASE homechart TO \u0026#34;homechart\u0026#34;; GRANT ALL PRIVILEGES ON SCHEMA public TO \u0026#34;homechart\u0026#34;; Yes, you should be able to run Homechart on a Raspberry Pi! "},{"id":4,"href":"/installing-homechart/server/on-your-network/installation/binary-install/","title":"Binary Install","section":"Installation","content":" Binary Install # Homechart can be deployed as a standalone binary on Linux (amd64 and arm) from our releases website.\n1. Review the requirements # Ensure your system meets the Server Requirements.\n2. Download Homechart # Visit https://releases.homechart.app/ and download the version of Homechart for your platform. Optionally, you can verify your download by comparing the SHA-512 sum:\n$ sha256sum -c homechart_latest_linux_amd64.gz.sha256 Once your download has completed, decompress it:\n$ gzip -d homechart_latest_linux_arm.gz $ mv /usr/local/bin/homechart $ chmod +x /usr/local/bin/homechart 3. Run Homechart # The Homechart executable can be ran from any directory and stores no files locally. You will need to provide some configuration settings via environment variables or a JSON configuration file, see Configuration Options.\nCLI # A minimal command line for Homechart with a config file in the current directory:\n$ homechart -c config.yaml serve systemd # A base homechart.service file with a config file in /usr/local/etc:\n[Unit] Description=Homechart - Your Handy Home Assistant Documentation=https://docs.homechart.app After=network.target [Service] Type=simple User=homechart Group=homechart ExecStart=/usr/local/bin/homechart -c /usr/local/etc/homechart.yaml run Restart=always RestartSec=1s [Install] WantedBy=multi-user.target We do something similar to this method for running Homechart in the cloud. "},{"id":5,"href":"/installing-homechart/server/on-your-network/installation/container-install/","title":"Container Install","section":"Installation","content":" Container Install # Homechart can be deployed as a container on Linux (amd64 and arm) from our images hosted on GitHub.\n1. Review the requirements # Ensure your system meets the Server Requirements.\n2. Install a container runtime # Homechart can run on any OCI compatible runtime on Linux amd64 and arm64. Most users use Docker and Docker Compose, but we also support Kubernetes and Podman.\n3. Run Homechart # The Homechart container is configured to start Homechart server without having to specify a command or entrypoint. You will need to provide some configuration settings via environment variables, see Configuration Options.\nKubernetes (via helm) # Our Helm Chart is available on ArtifactHub and GitHub.\n$ helm repo add homechart https://helm.homechart.app/ $ helm install my-homechart homechart/homechart docker/podman run # A minimal docker run for Homechart:\n$ docker run -e HOMECHART_POSTGRESQL_HOSTNAME=homechart -e HOMECHART_POSTGRESQL_PASSWORD=homechart -e HOMECHART_POSTGRESQL_USERNAME=homechart -p 3000:3000 -d candiddev/homechart docker-compose.yml # A base docker-compose.yml file:\nversion: \u0026#34;3\u0026#34; services: homechart: depends_on: - postgres environment: HOMECHART_POSTGRESQL_HOSTNAME: postgres HOMECHART_POSTGRESQL_PASSWORD: postgres HOMECHART_POSTGRESQL_USERNAME: postgres image: ghcr.io/candiddev/homechart:latest ports: - \u0026#34;3000:3000\u0026#34; restart: always postgres: environment: POSTGRES_PASSWORD: postgres image: docker.io/postgres:14 restart: always volumes: - postgres:/var/lib/postgresql/data volumes: postgres: {} "},{"id":6,"href":"/using-homechart/","title":"Using Homechart","section":"Welcome","content":" Using Homechart # Homechart is a platform designed for organizing and managing your household data. Homechart does this using Accounts and Households:\nAccounts are user accounts that access Homechart. Households are are groups of Accounts that share things in Homechart. Accounts can be part of multiple Households. Everything in Homechart is owned by an Account or a Household. Homechart has Components that are responsible for managing a specific type of data, like Bookmarks, Budget, Calendar, etc. Components within Homechart can be:\nHidden, if you\u0026rsquo;re not planning on using Homechart to manage that data Restricted, if you do not want certain members of your household to manage that data Some Components only work with Households. See our pricing page for details.\n"},{"id":7,"href":"/installing-homechart/client/ios/","title":"iOS","section":"Client","content":" iOS # Download the app on the App Store to get started with Homechart on iOS.\nConnecting to Self-Hosted Instances # Tick the \u0026ldquo;Self-Hosted Server\u0026rdquo; button on the Sign In or Sign Up page to connect to your self-hosted instance. Fill in the address of your self-hosted instance (e.g. https://web.homechart.app).\nThe iOS version of Homechart is a repackaging of the web version using a tool called Capacitor. This repackaging has caused some problems in the past, and we do occasionally run into iOS specific bugs. If you notice something not looking/feeling right on iOS, please contact us! "},{"id":8,"href":"/security/","title":"Security","section":"Welcome","content":" Security # Focusing on Security is how we keep Homechart data confidential and private. We recognize that maintaining secure software is a continuous process, and we have measures in place to help keep Homechart\u0026rsquo;s code free of vulnerabilities.\nThese pages provide more details around our security methods:\nClient Server Security Announcements # We will disclose known security vulnerabilities as soon as a mitigation is available, typically in the form of a patch. We will post the announcements on Discord and our Newsletter.\nReport a Vulnerability # We really appreciate users and researches that report vulnerabilities. All reports are triaged, investigated, and resolved as quickly as possible.\nPlease message us via the Contact Us form in the app or email info@homechart.app with the subject Vulnerability Report to report a vulnerability with Homechart.\n"},{"id":9,"href":"/getting-help/community-support/","title":"Community Support","section":"Getting Help","content":" Community Support # Homechart communities are available to help with common issues encountered with self-hosting and advice for using Homechart on different devices.\n"},{"id":10,"href":"/getting-help/paid-support/","title":"Paid Support","section":"Getting Help","content":" Paid Support # After setting up your Homechart subscription, you can use the Contact Us options in the menu to submit support and feature requests.\n"},{"id":11,"href":"/helping-out/communities/","title":"Communities","section":"Helping Out","content":" Communities # Join our user communities to give and receive help!\nDiscord GitHub Reddit "},{"id":12,"href":"/helping-out/documentation/","title":"Documentation","section":"Helping Out","content":" Documentation # Documenting Homechart is an ongoing effort. Please contact us or update the documentation yourself if you feel something is missing!\nUpdating Documentation # You can update our documentation if you feel something is missing. Checkout this git repo and open a pull request with your changes.\n"},{"id":13,"href":"/helping-out/translating/","title":"Translating","section":"Helping Out","content":" Translations # Translating Homechart is an ongoing process. You can help us out by updating or adding translations or contacting support with the language you want or corrected translations.\nUpdating or Adding Translations # Homechart generates translations from the translations.yaml file. It\u0026rsquo;s a big file, but it lets you see everything there is to translate in Homechart.\nSyntax # The syntax for the file is easy to understand:\ndefaultcode: en # English is the default/fallback language iso639codes: # A list of the ISO-639 codes and the display name for them de: Deutsch en: English translations: # A list of translation objects. The objects contain context and a translation for each of the iso639codes EmailEmailAddressChangeConfirmationSubject: context: Subject for email address changes de: \u0026#39;[Aktion erforderlich] Bestätigen Sie Ihre aktualisierte E-Mail-Adresse\u0026#39; en: | [Action Required] Verify Your Updated Email Address Adding a new language # To add a new language, please contact us. You can add it to the translations.yaml, but we have tooling that can generate the translations first and then have you review them.\nUpdating translations # You can update the translations if you notice something in Homechart that isn\u0026rsquo;t translated correctly. Checkout this git repo and open a pull request with your changes. You should be able to search the document to find the original translation.\n"},{"id":14,"href":"/installing-homechart/client/web/","title":"Web","section":"Client","content":" Web # Homechart can be used by any web browser. Visit https://web.homechart.app or your self-hosted URL to get started. On compatible devices, Homechart will prompt you to install it\u0026ndash;this will install Homechart as if it is a native app.\nHomechart uses a lot of neat web technologies to be as close to a native app as possible. We spend a lot of time ensuring it\u0026rsquo;s fast, doesn\u0026rsquo;t slow down your device, and feels responsive and snappy. "},{"id":15,"href":"/installing-homechart/server/on-your-network/installation/configuration-options/","title":"Configuration Options","section":"Installation","content":" Configuration Options # Homechart can be configured using environment variables or a JSON configuration file. The configuration is divided into sections:\nApp App PostgreSQL SMTP Vault For environment variables, every configuration key can be set using HOMECHART_\u0026lt;SECTION\u0026gt;_\u0026lt;KEY\u0026gt;=a value, i.e. HOMECHART_CLI_DEBUG=true\nFor a JSON or YAML configuration file, the keys are camelCase and nested under each section:\nJSON\n{ \u0026#34;app\u0026#34;: { \u0026#34;baseURL\u0026#34;: \u0026#34;example.com\u0026#34; } } YAML\napp: baseURL: example.com Configuration values can be booleans (true/false), integers (1/2/3), lists (1,2,3/a,b,c), and strings (a/b/c).\nHomechart can also read configuration files from HashiCorp Vault. See Vault.\napp # adminEmailAddresses (recommended) # List of email addresses which will have admin access to Homechart for their account.\nType: List Default: [] Environment Variable: HOMECHART_APP_ADMINEMAILADDRESSES JSON: {\u0026#34;app\u0026#34;: {\u0026#34;adminEmailAddresses\u0026#34;: []}} baseURL (recommended) # Base URL for Homechart, mostly used by notifications.\nType: string Default: \u0026#34;https://web.homechart.app\u0026#34; Environment Variable: HOMECHART_APP_BASEURL JSON: {\u0026#34;app\u0026#34;: {\u0026#34;baseURL\u0026#34;: \u0026#34;https://web.homechart.app\u0026#34;}} cacheTTLMinutes # Number of minutes to keep entries in cache.\nType: integer Default: 15 Environment Variable: HOMECHART_APP_CACHETTLMINUTES JSON: {\u0026#34;app\u0026#34;: {\u0026#34;cacheTTLMinutes\u0026#34;: 15}} demo # Allow users to create demo logins, mostly used by web.homechart.app. Easy way to try out Homechart.\nType: boolean Default: false Environment Variable: HOMECHART_APP_DEMO JSON: {\u0026#34;app\u0026#34;: {\u0026#34;demo\u0026#34;: false}} disableTasks # Disable any background tasks (sending notifications, cleaning up old data) from running on this instance.\nType: boolean Default: false Environment Variable: HOMECHART_APP_DISABLETASKS JSON: {\u0026#34;app\u0026#34;: {\u0026#34;disableTasks\u0026#34;: false}} keepCalendarEventDays # Number of days to retain Calendar Events after their end date.\nType: integer Default: 90 Environment Variable: HOMECHART_APP_KEEPCALENDAREVENTDAYS JSON: {\u0026#34;app\u0026#34;: {\u0026#34;keepCalendarEventDays\u0026#34;: 90}} keepCookMealPlanDays # Number of days to retain Cook Meal Plans after their scheduled date.\nType: integer Default: 90 Environment Variable: HOMECHART_APP_KEEPCOOKMEALPLANDAYS JSON: {\u0026#34;app\u0026#34;: {\u0026#34;keepCookMealPlanDays\u0026#34;: 90}} keepDeletedDays # Number of days to keep deleted data (Notes, Recipes).\nType: integer Default: 30 Environment Variable: HOMECHART_APP_KEEPDELETEDDAYS JSON: {\u0026#34;app\u0026#34;: {\u0026#34;keepDeletedDays\u0026#34;: 30}} keepHealthLogDays # Number of days to retain Health Logs.\nType: integer Default: 90 Environment Variable: HOMECHART_APP_KEEPHEALTHLOGDAYS JSON: {\u0026#34;app\u0026#34;: {\u0026#34;keepHealthLogDays\u0026#34;: 90}} keepNotesPageVersions # Number of Notes Page Versions to keep.\nType: integer Default: 10 Environment Variable: HOMECHART_APP_KEEPNOTESPAGEVERSIONS JSON: {\u0026#34;app\u0026#34;: {\u0026#34;keepNotesPageVersions\u0026#34;: 10}} keepPlanTasksDays # Number of days to keep completed tasks.\nType: integer Default: 90 Environment Variable: HOMECHART_APP_KEEPPLANTASKSDAYS JSON: {\u0026#34;app\u0026#34;: {\u0026#34;keepPlanTasksDays\u0026#34;: 90}} motd # Informational message to display on the UI for all users.\nType: string Default: \u0026#34;\u0026#34; Environment Variable: HOMECHART_APP_MOTD JSON: {\u0026#34;app\u0026#34;: {\u0026#34;motd\u0026#34;: \u0026#34;\u0026#34;}} port # Listening port for Homechart. Setup port forwarding to this port.\nType: integer Default: 3000 Environment Variable: HOMECHART_APP_PORT JSON: {\u0026#34;app\u0026#34;: {\u0026#34;port\u0026#34;: 3000}} proxyAddress # Upstream IPv4 or IPv6 address of a trusted proxy. See SSO documentation for usage details.\nType: string Default: \u0026#34;\u0026#34; Environment Variable: HOMECHART_APP_PROXYADDRESS JSON: {\u0026#34;app\u0026#34;: {\u0026#34;proxyAddress\u0026#34;: \u0026#34;\u0026#34;}} proxyHeaderEmail # Proxy header that should be associated with an account email address. See SSO documentation for usage details.\nType: string Default: \u0026#34;\u0026#34; Environment Variable: HOMECHART_APP_PROXYHEADEREMAIL JSON: {\u0026#34;app\u0026#34;: {\u0026#34;proxyHeaderEmail\u0026#34;: \u0026#34;\u0026#34;}} proxyHeaderName # Proxy header that should be associated with an account name. See SSO documentation for usage details.\nType: string Default: \u0026#34;\u0026#34; Environment Variable: HOMECHART_APP_PROXYHEADERNAME JSON: {\u0026#34;app\u0026#34;: {\u0026#34;proxyHeaderName\u0026#34;: \u0026#34;\u0026#34;}} rateLimiterRate # Maximum number of requests over a specific time to public endpoints. Prevents brute force attacks. Takes the format of (number-H/M/S) where H=hour, M=minute, S=Second. The default, 15-H, means 15 requests per hour.\nType: string Default: \u0026#34;15-H\u0026#34; Environment Variable: HOMECHART_APP_RATELIMITERRATE JSON: {\u0026#34;app\u0026#34;: {\u0026#34;rateLimiterRate\u0026#34;: \u0026#34;15-H\u0026#34;}} rollupBudgetTransactionsBalanceMonths # Number of months before a Budget Transaction is rolled up into a starting balance.\nType: integer Default: 48 Environment Variable: HOMECHART_APP_ROLLUPBUDGETTRANSACTIONSBALANCEMONTHS JSON: {\u0026#34;app\u0026#34;: {\u0026#34;rollupBudgetTransactionsBalanceMonths\u0026#34;: 48}} rollupBudgetTransactionsSummaryMonths # Number of months before a Budget Transaction is rolled up into monthly summaries.\nType: integer Default: 12 Environment Variable: HOMECHART_APP_ROLLUPBUDGETTRANSACTIONSSUMMARYMONTHS JSON: {\u0026#34;app\u0026#34;: {\u0026#34;rollupBudgetTransactionsSummaryMonths\u0026#34;: 12}} sessionExpirationDefaultSeconds # Time between non-Remember Me sessions expiring, in seconds.\nType: integer Default: 3600 Environment Variable: HOMECHART_APP_SESSIONEXPIRATIONDEFAULTSECONDS JSON: {\u0026#34;app\u0026#34;: {\u0026#34;sessionExpirationDefaultSeconds\u0026#34;: 3600}} sessionExpirationRememberSeconds # Time between Remember Me sessions expiring, in seconds.\nType: integer Default: 7776000 Environment Variable: HOMECHART_APP_SESSIONEXPIRATIONREMEMBERSECONDS JSON: {\u0026#34;app\u0026#34;: {\u0026#34;sessionExpirationRememberSeconds\u0026#34;: 7776000}} signupDisabled # Disables new account signups. Accounts can still be created/invited under the Admin \u0026gt; Accounts. Self-hosted instances should enable this after they have setup their household.\nType: boolean Default: false Environment Variable: HOMECHART_APP_SIGNUPDISABLED JSON: {\u0026#34;app\u0026#34;: {\u0026#34;signupDisabled\u0026#34;: false}} tlsCertificate # Path to a SSL/TLS certificate file. Should work for the domain in your baseURL. If set, along with tlsKey, Homechart will listen for HTTPS connections only.\nType: string Default: \u0026#34;\u0026#34; Environment Variable: HOMECHART_APP_TLSCERTIFICATE JSON: {\u0026#34;app\u0026#34;: {\u0026#34;tlsCertificate\u0026#34;: \u0026#34;\u0026#34;}} tlsKey # Path to a SSL/TLS private key file. Should work for the domain in your baseURL. If set, along with tlsCertificate), Homechart will listen for HTTPS connections only.\nType: string Default: \u0026#34;\u0026#34; Environment Variable: HOMECHART_APP_TLSKEY JSON: {\u0026#34;app\u0026#34;: {\u0026#34;tlsKey\u0026#34;: \u0026#34;\u0026#34;}} cli # debug # Enable debug logging.\nType: boolean Default: false Environment Variable: HOMECHART_CLI_DEBUG JSON: {\u0026#34;cli\u0026#34;: {\u0026#34;debug\u0026#34;: false}} noColor # Disable colored logging\nType: boolean Default: false Environment Variable: HOMECHART_CLI_NOCOLOR JSON: {\u0026#34;cli\u0026#34;: {\u0026#34;noColor\u0026#34;: false}} postgresql # database (required) # Database to use when connecting to PostgreSQL.\nType: string Default: \u0026#34;\u0026#34; Environment Variable: HOMECHART_POSTGRESQL_DATABASE JSON: {\u0026#34;postgresql\u0026#34;: {\u0026#34;database\u0026#34;: \u0026#34;\u0026#34;}} hostname (required) # Hostname to use when connecting to PostgreSQL.\nType: string Default: \u0026#34;localhost\u0026#34; Environment Variable: HOMECHART_POSTGRESQL_HOSTNAME JSON: {\u0026#34;postgresql\u0026#34;: {\u0026#34;hostname\u0026#34;: \u0026#34;localhost\u0026#34;}} maxConnections # Maximum number of open connections to PostgreSQL.\nType: integer Default: 25 Environment Variable: HOMECHART_POSTGRESQL_MAXCONNECTIONS JSON: {\u0026#34;postgresql\u0026#34;: {\u0026#34;maxConnections\u0026#34;: 25}} maxIdleConnections # Maximum number of idle connections to PostgreSQL.\nType: integer Default: 5 Environment Variable: HOMECHART_POSTGRESQL_MAXIDLECONNECTIONS JSON: {\u0026#34;postgresql\u0026#34;: {\u0026#34;maxIdleConnections\u0026#34;: 5}} maxLifetimeMinutes # Maximum number of minutes to keep a connection to PostgreSQL open.\nType: integer Default: 5 Environment Variable: HOMECHART_POSTGRESQL_MAXLIFETIMEMINUTES JSON: {\u0026#34;postgresql\u0026#34;: {\u0026#34;maxLifetimeMinutes\u0026#34;: 5}} password (required) # Password to use when connecting to PostgreSQL.\nType: string Default: \u0026#34;\u0026#34; Environment Variable: HOMECHART_POSTGRESQL_PASSWORD JSON: {\u0026#34;postgresql\u0026#34;: {\u0026#34;password\u0026#34;: \u0026#34;\u0026#34;}} port # TCP port to use when connecting to PostgreSQL.\nType: integer Default: 5432 Environment Variable: HOMECHART_POSTGRESQL_PORT JSON: {\u0026#34;postgresql\u0026#34;: {\u0026#34;port\u0026#34;: 5432}} sslMode # PostgreSQL SSL/TLS enforcement level.\nType: string Default: \u0026#34;disable\u0026#34; Environment Variable: HOMECHART_POSTGRESQL_SSLMODE JSON: {\u0026#34;postgresql\u0026#34;: {\u0026#34;sslMode\u0026#34;: \u0026#34;disable\u0026#34;}} username (required) # Username to use when connecting to PostgreSQL.\nType: string Default: \u0026#34;\u0026#34; Environment Variable: HOMECHART_POSTGRESQL_USERNAME JSON: {\u0026#34;postgresql\u0026#34;: {\u0026#34;username\u0026#34;: \u0026#34;\u0026#34;}} smtp # Homechart can use a SMTP server to send notifications to your household members.\nfromAddress # Email address to send from. Required to make SMTP work.\nType: string Default: \u0026#34;\u0026#34; Environment Variable: HOMECHART_SMTP_FROMADDRESS JSON: {\u0026#34;smtp\u0026#34;: {\u0026#34;fromAddress\u0026#34;: \u0026#34;\u0026#34;}} hostname # Hostname to use when connecting to SMTP server.\nType: string Default: \u0026#34;\u0026#34; Environment Variable: HOMECHART_SMTP_HOSTNAME JSON: {\u0026#34;smtp\u0026#34;: {\u0026#34;hostname\u0026#34;: \u0026#34;\u0026#34;}} noEmailDomains # List of domains that will not be verified. Use this to automatically activate accounts for each domain listed.\nType: list Default: [] Environment Variable: HOMECHART_APP_NOEMAILDOMAINS JSON: {\u0026#34;app\u0026#34;: {\u0026#34;noEmailDomains\u0026#34;: []}} password # Password to use when connecting to SMTP server.\nType: string Default: \u0026#34;\u0026#34; Environment Variable: HOMECHART_SMTP_PASSWORD JSON: {\u0026#34;smtp\u0026#34;: {\u0026#34;password\u0026#34;: \u0026#34;\u0026#34;}} port # TCP port to use when connecting to SMTP server.\nType: integer Default: 587 Environment Variable: HOMECHART_SMTP_PORT JSON: {\u0026#34;smtp\u0026#34;: {\u0026#34;port\u0026#34;: 587}} replyTo # Email address to have users send to when replying.\nType: string Default: \u0026#34;\u0026#34; Environment Variable: HOMECHART_SMTP_REPLYTO JSON: {\u0026#34;smtp\u0026#34;: {\u0026#34;replyTo\u0026#34;: \u0026#34;\u0026#34;}} username # Username to use when connecting to SMTP server.\nType: string Default: \u0026#34;\u0026#34; Environment Variable: HOMECHART_SMTP_USERNAME JSON: {\u0026#34;smtp\u0026#34;: {\u0026#34;username\u0026#34;: \u0026#34;\u0026#34;}} vault # Homechart can use HashiCorp Vault to retrieve configuration values. Homechart will look for specified kv secrets and read config values from fields within them. The fields must have the format:\n\u0026lt;section\u0026gt;.\u0026lt;key\u0026gt; app.disabletasks The field name must be lowercase. In theory, you can specify every config in Vault except the Vault stanza, Homechart needs to know where to get the Vault config from.\naddress # Address of the HashiCorp Vault instance to use for secrets, also checks the VAULT_ADDR environment variable.\nType: string Default: \u0026#34;\u0026#34; Environment Variable: HOMECHART_VAULT_ADDRESS JSON: {\u0026#34;vault\u0026#34;: {\u0026#34;address\u0026#34;: \u0026#34;\u0026#34;}} kvPaths # List of HashiCorp Vault kv2 paths to fetch config values from. Secrets must have lowercase fields like postgresql.database or smtp.username. Paths will overwrite values from previous paths, so the order is important.\nType: list Default: [] Environment Variable: HOMECHART_VAULT_KVPATHS JSON: {\u0026#34;vault\u0026#34;: {\u0026#34;kvPaths\u0026#34;: []}} token # HashiCorp Vault token to use for secrets, also checks VAULT_TOKEN.\nType: string Default: \u0026#34;\u0026#34; Environment Variable: HOMECHART_VAULT_TOKEN JSON: {\u0026#34;vault\u0026#34;: {\u0026#34;token\u0026#34;: \u0026#34;\u0026#34;}} "},{"id":16,"href":"/installing-homechart/server/on-your-network/operations/backups/","title":"Backups","section":"Operations","content":" Backups # Please remember to backup your data! Self-hosted Homechart is easy to backup: all persistent data is stored in PostgreSQL, Homechart doesn\u0026rsquo;t save anything locally. You can use tools like pg_dump or wal-g to perform the backup.\nAdditionally, you can have your self-hosted instance perform automated, encrypted backups to Homechart Cloud. Visit /subscription on your self-hosted instance to enable this.\n"},{"id":17,"href":"/installing-homechart/server/on-your-network/operations/households/","title":"Households","section":"Operations","content":" Households # Using households in Homechart requires a subscription, even for self-hosted users. You can subscribe monthly or yearly , or buy a lifetime subscription/one time purchase, too.\nLinking Your Household to Homechart Cloud # You\u0026rsquo;ll need to link your self-hosted instance household to a household on Homechart Cloud to use your subscription. No data is transferred to Homechart Cloud, it\u0026rsquo;s just used to transfer the subscription details.\nSign up for a new account on Homechart Cloud On Homechart Cloud, create a household and setup a subscription (either during setup or under https://web.homechart.app/subscription) On your self-hosted instance, go to Subscription in the menu and copy the Self-Hosted ID On Homechart Cloud, paste the Self-Hosted ID into the appropriate field. Your household should now be linked! Enable Cloud Features # You can enable these cloud features for your self-hosted instance:\nBackups Push Notifications "},{"id":18,"href":"/installing-homechart/server/on-your-network/operations/updates/","title":"Updates","section":"Operations","content":" Updates # Homechart is easily updated by replacing the container or executable with a newer version.\nBinary Updates # Download a new copy of homechart_latest to install or update Homechart. You can compare the SHA-512 sum of your existing executable to see if you need to update. See Binary Install, it\u0026rsquo;s the same process as installing.\nContainer Updates # Pull the latest container to update Homechart, e.g.:\n$ docker pull candiddev/homechart:latest Depending on how you\u0026rsquo;re running Homechart, you may need to remove the existing Homechart container or re-run docker-compose up\n"},{"id":19,"href":"/security/client/","title":"Client","section":"Security","content":" Client Security # Homechart\u0026rsquo;s Android, iOS, and Web clients are developed using TypeScript and standard web development tooling. Here are some of the methods we use to help keep Homechart\u0026rsquo;s client code free of vulnerabilities:\nLimit Third-Party Libraries: We try and use as few third-party libraries as possible, and when we do select a third-party library, we review the codebase to ensure it\u0026rsquo;s something we are comfortable maintaining. No Cookies: We do not use cookies for client-side authentication and authorization. Secure Software Supply Chain: We require a clean npm audit for every pull request and build. "},{"id":20,"href":"/security/server/","title":"Server","section":"Security","content":" Server Security # Homechart\u0026rsquo;s Cloud and Self-Hosted server is developed using Go. Here are some of the methods we use to help keep Homechart\u0026rsquo;s server code free of vulnerabilities:\nArgon2 Password Hashing: We hash user passwords with Argon2. Auth Test Suite: We use an extensive authentication and authorization test suite for every pull request and build. Limit Third-Party Libraries: We try and use as few third-party libraries as possible, and when we do select a third-party library, we review the codebase to ensure it\u0026rsquo;s something we are comfortable maintaining. Parameterized Queries: We use parameterized queries to help prevent SQL injection attacks. Secure Software Supply Chain: We require a clean govulncheck for every pull request and build. "},{"id":21,"href":"/using-homechart/components/bookmarks/","title":"Bookmarks","section":"Components","content":" Bookmarks # Bookmarks help you manage links to other apps and services. You can create personal or household bookmarks, show and hide Bookmarks in the Home and Menu, and control how the Bookmark apps open within Homechart.\nOur household uses Bookmarks to share/access links to self-hosted services like Home Assistant.\nI added Bookmarks to Homechart to replace a Google Sheet we used for sharing/remembering links.\nUse Image for Icon # You can have an image like a favicon or the logo for the app be displayed instead of an icon for Bookmarks. Tick Use Image as Icon and enter a URL.\nOpen Bookmark in a New Window # By default, Homechart will render the Bookmark as an iframe\u0026ndash;the Bookmark will be displayed \u0026ldquo;within\u0026rdquo; Homechart\u0026rsquo;s layout. This may not work for all websites due to security measures like CORS. You can disable this feature by ticking Open in New Window while editing or creating a Bookmark.\nShow on Home # Personal and Household Bookmarks can be displayed in the Home and Menu by ticking Show on Home while editing or creating a Bookmark. For Household Bookmarks, ticking this will show the Bookmark for all members of your household.\n"},{"id":22,"href":"/using-homechart/components/budget/","title":"Budget","section":"Components","content":" Budget # Budget helps you manage and save your money.\nOur household uses Budget for all of our finances. We have Accounts for our financial institutions, as well as Accounts for assets like our vehicles.\nFor Categories, we split our bills into two Groupings \u0026ndash; monthly bills, with Categories for Cellphone, Electricity, etc. We have another grouping for Non-Monthly bills, like Property Taxes. We also have Entertainment categories for each household member\u0026ndash;we put our kid\u0026rsquo;s allowance in them (we call it The I Owe You Bank). We use Targets quite a bit, so we can quickly budget an entire month with one click.\nI added Budget to Homechart to replace You Need A Budget/YNAB instead of converting to their cloud service. When we started Budgeting using Homechart, we didn\u0026rsquo;t bring any of our transactions over, we started fresh within Homechart. We don\u0026rsquo;t typically do a lot of look back with our budgeting, aside from the Reports.\nAccounts # Budget \u0026gt; Accounts represent the actual locations where you put your money. These can be checking/saving accounts, investment accounts, or even assets like your house. Budget \u0026gt; Accounts will contain transactions to represent how your money moves.\nYou can add/remove Budget \u0026gt; Accounts from your budget by ticking On Budget. This impacts how transfers between accounts work. Transfers between accounts that have the same budget status do not need to be categorized, transfers between different ones must always be categorized.\nAs an example, if your Checking and Credit Card accounts are On Budget, and your House is not, a transfer from Checking Account to House must be categorized but a transfer from Checking to Credit Card does not.\nCategories # Budget \u0026gt; Categories are virtual \u0026ldquo;envelopes\u0026rdquo; that you allocate money towards. Homechart comes with a few predefined categories, but we recommend you create and customize your categories for what works with your household.\nA Budget \u0026gt; Category that has money in is money that can be \u0026ldquo;spent\u0026rdquo; for something. Likewise, a Budget \u0026gt; Category that has a negative amount of money in it is money that you \u0026ldquo;owe\u0026rdquo;.\nMost households budget for the next month, and adjust accordingly throughout the current month. Your goal should be to have the Remaining amount be 0.\nPlan \u0026gt; Projects and Shop \u0026gt; Lists can be associated with Budget \u0026gt; Categories, so you can save for Vacations and Wishlists.\nGroupings # All Budget \u0026gt; Categories are organized under groupings. Groupings will aggregate the money under categories for display purposes. A special grouping, Hidden, is used to hide Budget \u0026gt; Categories you no longer use.\nIncome # Budget \u0026gt; Categories that will contain income, such as money from your job or investments, should have Income ticked. Homechart will use the Income amounts for letting you know how much money you can budget.\nTarget Amounts # Budget \u0026gt; Categories can target a certain amount of money to simplify your budgeting. As an example, if you have a vacation in September, you can set your Vacation budget to have a Specific Date of September, the target amount for your vacation, and Homechart will calculate how much money you need to save every month to get to that goal.\nMonthly targets are used to simplify recurring expenses like cell phone or internet bills. Yearly targets are for yearly expenses like property taxes.\nPayees # Budget \u0026gt; Payees represents stores, businesses, or people you exchange money with. Payees can be used as Stores for Shop by ticking Shopping Store.\nTransactions # Budget \u0026gt; Transactions represent a credit or debit to an account. Transactions typically have a Payee, either another Budget \u0026gt; Account (for transfers) or a Budget \u0026gt; Payee. If a Budget \u0026gt; Category is required, you can add multiple to split a transaction across different categories. You can also set the month where a transaction will count for a category\u0026ndash;a typical use case for this is to allocate your bi-weekly paycheck across multiple months.\nImporting Transactions # You can import transactions from your financial institution by exporting them from your online banking portal as a CSV or OFX/QFX file. In Homechart, tap Import Transactions under an account to begin the import process.\nCurrently, Homechart does not support automatic import of transactions due to privacy concerns. The current methods for importing transactions automatically, especially in the US, require a third party to access your accounts on your behalf, and these third parties do not guarantee this data will remain private.\nRecurring Transactions # You can create a recurring transaction by ticking Recurring. This lets you select how/when the transaction will recur and add the transaction to the Recurring Transaction tab. In this tab, you\u0026rsquo;ll see a list of transactions and the next due date for them. The tab will show a number next to it if there are transactions that need to be entered. To enter a recurring transaction, tick the checkbox in the Add column.\nRollup # Eventually, Homechart will start rolling up transactions into monthly summaries, typically after 1 year. These summaries maintain the Payees/Budgets, but they will occur on the first day of the month instead of the day they really occurred. To prevent this from happening for certain transactions, tick Don\u0026rsquo;t Rollup Transaction.\nIntegrations # Budget integrates with:\nCalendar: Budget \u0026gt; Recurring Transactions will display on your Calendar Plan: Budget \u0026gt; Categories can be associated to Plan \u0026gt; Projects so you can save for household projects Shop: Budget \u0026gt; Categories can be associated to Shop \u0026gt; Lists so you can save for your wishlists "},{"id":23,"href":"/using-homechart/components/calendar/","title":"Calendar","section":"Components","content":" Calendar # Calendar helps you see everything going on in your Household.\nOur household uses Calendar for everything. We track all of our household activities in it, and we use the color functionality extensively\u0026ndash;my wife migrated from a physical, dry-erase calendar on our fridge to Homechart. Now we almost never forget anything, and it\u0026rsquo;s easy to see who is taking care of what.\nSeeing Calendar come alive in Homechart was really neat. A \u0026ldquo;calendar app\u0026rdquo; by itself is rather boring, it\u0026rsquo;s just events, so I held off on adding Calendar until there was more integration for it. Seeing it now, with all of my events, tasks, and meals in one spot, is exactly the reason I set out to build Homechart in the first place.\nEvents # Events are things that are happening within your household.\nParticipants # Events can have participants, members of your household that will be at the event. When this is set, only those members will be notified of the Event, and the Event will use the household member\u0026rsquo;s colors.\nLocation and Travel # Adding a Location to the event will give you a handy Google Maps link for directions to the location. You can also add Travel Time for an event to have Homechart calculate a Leave By time and notify you on when you need to leave.\nRecurring Events # Events can be recurring by ticking Recurring at the bottom. You can then set the recurring schedule.\nExport/Import Calendars # Homechart can export your calendar for use with other calendaring applications via ICS/iCalendar Feed. Tap Export Calendar to get a URL that you can add to your calendaring tool.\nLikewise, Homechart can import calendars from other applications that expose an ICS/iCalendar Feed. Tap Import Calendars to add them.\nOther Calendars # For your convenience, Homechart comes with a few calendars for common holidays and events. Please contact us if you\u0026rsquo;d like to see another Calendar added.\nIntegrations # Calendar integrates with:\nBudget: Calendar will display Budget \u0026gt; Recurring Transactions Cook: Calendar will manage your Cook \u0026gt; Meal Plans Health: Calendar will manage your Health \u0026gt; Logs Plan: Calendar will display Plan \u0026gt; Tasks Shop: Calendar can add your Cook \u0026gt; Meal Plan Ingredients to your Shop \u0026gt; Pick Up list "},{"id":24,"href":"/using-homechart/components/cook/","title":"Cook","section":"Components","content":" Cook # Cook helps you organize your recipes and create meal plans.\nOur household uses Cook for all of our meal plans. We have over 300 recipes, and we try to cook most of our dinners at home. We try to get the kids to help pick out meals, but most of our meal planning involves hitting the Surprise Me button until something sounds good. We take turns cooking meals using the Chef option to limit the amount of cooking we have to do individually.\nHomechart started as a cooking app. We were using Paprika when I decided to start building something that integrated better.\nMeal Plans # A Cook \u0026gt; Meal Plan is a Cook \u0026gt; Recipe that happens during a Cook \u0026gt; Meal Time.\nDate and Time # You start by setting a Date, the Meal for the Date, and adjusting when you want to eat at.\nChef # You can optionally choose a Chef\u0026ndash;they will receive notifications on when to start preparing/cooking the meal.\nRecipe # The Cook \u0026gt; Recipe for a Cook \u0026gt; Meal Plan can be a Recipe within Homechart or just a reminder for something, like \u0026ldquo;Eating at a Restaurant\u0026rdquo;. You can send Prep and Cook reminders if you select a Recipe from within Homechart\u0026ndash;these will notify you when you need to start preparing or cooking a meal so it\u0026rsquo;s ready by the Meal Time. You can also scale the recipe to increase the number of servings.\nNot sure what to cook? The Surprise Me button can help you! You can Filter For Tags to choose a random recipe that has certain tags, like dinner.\nMeal Times # Meal Times are used with Meal Plans to organize when a Meal Plan happens. This helps Homechart display all the recipes that will be made for a certain meal like Dinner.\nHomechart comes with common meal times (Breakfast, Lunch, Dinner), but you can change them or create new ones (like Snack).\nRecipes # Recipes contain the ingredients and directions for creating meals. Recipes can be added individually, scanned from cookbooks, or imported from CSV/websites.\nCopying Recipes # You can copy a recipe to make a new version of it under Add \u0026gt; Copy Recipe.\nImporting Recipes # CSV # You can mass import recipes from a CSV file under Cook \u0026gt; Recipes. Tap Add \u0026gt; Import Recipes From CSV, select your CSV file, and map the columns in Homechart.\nCookbooks # Homechart can scan text from paper, like cookbooks. You can use this to scan physical cookbooks into Homechart by creating a new Recipe, and tapping Scan Text From Picture\nWebsite # You can import recipes from a website by tapping Add \u0026gt; Import Recipe from Website. Fill in the website and Homechart should import it. Not all websites work, typically if you search for a website on Google and it shows a picture of the recipe/details, it should import OK into Homechart.\nIngredients and Directions # When adding ingredients and directions, you can use text formatting via Markdown to make your recipe easier to read. You can also reference other recipes by using #cookrecipe and typing the recipe name. By adding other recipes, you can include them in your Meal Planning.\nHomechart will check your Inventory to see if you have any Ingredients in stock. You\u0026rsquo;ll see the Inventory icon next to the ingredient if you do.\nYou can add Ingredients for a Recipe to your Shop \u0026gt; Pick Up list by tapping Add \u0026gt; Ingredients to Shopping List.\nNotes # Recipes can have Notes that you can use to record changes, thoughts on the recipe, and other useful notes for your future self.\nPublic Recipes # You can share your recipes publicly by ticking Public. You can then share the current page address with other people to have them see your recipe.\nIntegrations # Cook integrates with:\nInventory: Cook \u0026gt; Recipes will show you what Ingredients you have in your Inventory Shop: Cook \u0026gt; Recipes ingredients can be added to your Shop \u0026gt; Pick Up list. Homechart will consult your Inventory and exclude the ones you have in stock. "},{"id":25,"href":"/using-homechart/components/health/","title":"Health","section":"Components","content":" Health # Health helps you and your family log the way you feel, the food you eat, and the symptoms you have to help you discover correlations between your health and your environment. Health is great for tracking your own health, but you and your spouse can use it to track your child\u0026rsquo;s health, too. In a household, Household Owners can manage a child\u0026rsquo;s health data, but they can\u0026rsquo;t see each other\u0026rsquo;s data.\nI added Health to Homechart because I wanted to track food allergies in a private, secure way. There are a lot of apps in the various app stores that do this, and they all seemed to have questionable privacy policies. I also wanted to do simple correlation tracking, and not have to remember to track everything exactly when it happens. Inputs and Outputs # You use Health \u0026gt; Inputs and Health \u0026gt; Outputs when you create a Health \u0026gt; Log.\nInputs # Health \u0026gt; Inputs are typically things that you or your household member eat, medications taken, or possibly environments. Homechart comes with common allergens and problem foods out of the box.\nOutputs # Health \u0026gt; Outputs represent how you or your household member feel. Homechart comes with common allergy symptoms out of the box.\nCorrelations # After you\u0026rsquo;ve created a few Health \u0026gt; Logs, Homechart will start calculating correlations between your outputs and inputs. The way Homechart does this isn\u0026rsquo;t complicated: for each Output you Log, Homechart will look back at the Inputs you logged previous and add a correlation.\nYou\u0026rsquo;ll likely see a lot of Correlations over time, the best way to interpret it is to look for things with the highest number of correlations. Correlations are removed over time, so things with a high correlation should remain high.\nLogs # Health \u0026gt; Logs are the way you record an Input or an Output occurring. Logs are date specific, so you can enter all of your Inputs/Outputs at the end of the day if necessary. You create Logs in Calendar.\nIntegrations # Health integrates with:\nCalendar: Health \u0026gt; Logs are managed and displayed in Calendar "},{"id":26,"href":"/using-homechart/components/inventory/","title":"Inventory","section":"Components","content":" Inventory # Inventory helps you track and organize things in your household. You can use Inventory to track big purchases, warranties, items in your pantry, storage bins, and more.\nOur household uses Inventory extensively. We have storage bins in our basement filled with old clothes, decorations, and other supplies that live in Homechart as Collections. We converted a Google Sheet containing our Big Purchases, computer builds, and warranties into Inventory Items, and I track all of my Z-Wave devices in it and note when I change their batteries.\nI added Inventory to Homechart because I wanted a simple, flexible way to track things. I didn\u0026rsquo;t mind using Google Sheets, but I wanted more of a simple database.\nItems # An Inventory \u0026gt; Item represents something in your house\u0026ndash;a TV, a bag of flour, batteries, furniture, etc. When you add a new Item, you can add a Picture of it, the Quantity/number you have, Properties, and a UPC.\nImport From CSV # You can import items from CSV to migrate your existing Inventory into Homechart. Tap Add \u0026gt; Import Items From CSV to select your CSV and map the fields into Properties.\nQuantity # A lot of the things you add into Inventory will be single items, however you can also keep track how many you have of certain things. This is useful for tracking inventory of stuff you use in your household like cleaners, food, spices, etc. Inventory integrates with Shop to let you quickly add Items to your Pick Up list when you run out.\nProperties # Items can have multiple Properties assigned to them. Homechart aggregates the properties so you can easily assign them to other Items using the same values. You\u0026rsquo;ll use these Properties to create Collections\nUPC # Items can be scanned via UPC/Barcodes. You can add new Items this way, or increase the Quantity of existing items. UPC scanning makes taking inventory of your pantry post-grocery shopping a breeze.\nCollections # Inventory \u0026gt; Collections are basically views into your Inventory. Collections let you select the Columns/ Properties to display and filter the Columns/Properties for specific values. Using Collections, you could display Items with the Property \u0026ldquo;Location\u0026rdquo; equal to \u0026ldquo;Attic\u0026rdquo;. You could also name Collections after storage totes, and add the Items within the tote to the Collection.\nQR Codes # Collections and Items can generate QR Codes that you can print/affix to the Collection or Item. These QR Codes will link you directly to the Item/Collection in question. Putting QR Codes on your storage bins will allow you to easily see what\u0026rsquo;s inside of them via Homechart without having to dig through them!\nIntegrations # Inventory integrates with:\nCook: Inventory \u0026gt; Items you have a Quantity \u0026gt; 0 of will be displayed next to Cook \u0026gt; Recipe Ingredients Plan: Inventory Items can be associated with Plan \u0026gt; Tasks, such as having a Lawn Mower Item and a Change Oil Task Shop: Inventory can add Items to your Shop \u0026gt; Pick Up list "},{"id":27,"href":"/using-homechart/components/notes/","title":"Notes","section":"Components","content":" Notes # Notes help you organize and manage your household knowledgebase and wiki.\nOur household uses Notes as a way to remember things, like how to use the generator in case of a blackout or important phone numbers/contacts for babysitters.\nI added Notes to Homechart as a way to centralize a bunch of Google Docs. I wanted a household wiki without having to spin up any of the various wiki solutions, and I wanted to be able to reference things without have to copy/paste links everywhere.\nPages # You create Pages within Notes. Pages can live within other Pages, have Tags, and use Markdown for the Body of the page.\nVersions # Every time you edit a page, you create a new Version. These Versions are saved within Homechart, and you can view them or restore them in case you made a mistake. Tap the date at the bottom to view old Versions.\nIntegrations # Notes integrates with everything, as most users use the Markdown Linking to organize items across Homechart, such as planning a party or vacation.\n"},{"id":28,"href":"/using-homechart/components/plan/","title":"Plan","section":"Components","content":" Plan # Plan helps you track personal and household Projects and Tasks in one spot.\nOur household uses Plan to track recurring household tasks and household projects. We have recurring tasks for chores (for everyone in the household, kids included), maintenance reminders, and our pets. We track all of our household projects/vacations/home improvement plans within it so we all know what needs to be done.\nI added Plan to Homechart to replace Todoist for our household. We felt too disorganized having things within one app that referenced a line on a Google Sheet, and I wanted to have more integrations with other things in Homechart like Budgeting.\nProjects # Plan \u0026gt; Projects are typically where Tasks belong, though they can be found under a general Personal or Household bucket too. A Project is a collection of other Projects, Shop \u0026gt; Items, and Tasks. Projects can be associated with Budget \u0026gt; Category.\nTasks # Plan \u0026gt; Tasks are a thing that you or your household needs to do. Tasks can contain other Tasks (Sub Tasks). Task Names and Details use Markdown, so they can link to things within or outside Homechart if necessary. Tasks can have a Due Date, Due Time, and a Duration. Setting these values will have the Task appear in Calendar, and you\u0026rsquo;ll receive Settings \u0026gt; Notifications for them.\nYou can make tasks recur by setting a Due Date and ticking Recurring. Tasks can either recur on their Due Date, or you can tick Recur Based on Completion Date to have the task recur on the date when you actually complete it.\nTasks can reference an Inventory \u0026gt; Item, so you can associate maintenance tasks with your Lawn Mower.\nTemplates # Tasks can be converted to Personal or Household Templates, Tasks (and sub-tasks) that can be easily copied like a packing list for a vacation.\nIntegrations # Plan integrates with:\nBudget: Plan \u0026gt; Projects can be associated with a Budget \u0026gt; Category Calendar: Plan \u0026gt; Tasks will be displayed in Calendar Shop: Plan \u0026gt; Projects can contain Shop \u0026gt; Items "},{"id":29,"href":"/using-homechart/components/reward/","title":"Reward","section":"Components","content":" Reward # Reward helps your household do positive reinforcement.\nOur household uses Reward to help our kids work on good behaviors. We create cards with goals we want our kids to achieve and tie the reward to something they want like screen time.\nI added Reward to Homechart when my wife read about creating punch cards for positive reinforcement.\nCards # Reward \u0026gt; Cards represent tasks that need to completed a certain number of times to receive a reward. They can also represent a limited number rewards that can be redeemed.\nSenders and Recipients # You will assign certain household members as Senders and Recipients:\nSenders have access to edit, punch, and redeem the Card Recipients can view the Card In Progress and Redeemable # Cards that are In Progress have not yet earned enough punches to become Redeemable. Once a card is Redeemable, the Sender can either Redeem/Delete the Card or Reset the Card to start the process over.\nAlways Redeemable # Cards can be changed so the punches are actually redeemable charges. Think of it like a gift card, where you could give your kids 20 minutes of screen time, 5 times. Tap Always Redeemable to make a card work this way.\n"},{"id":30,"href":"/using-homechart/components/secrets/","title":"Secrets","section":"Components","content":" Secrets # Secrets help you protect notes, information, and other household data.\nOur household uses Secrets for storing and sharing passwords/as a password manager. Whenever we sign up for a new website, we generate a password and save the credentials in Homechart.\nI added Secrets because Homechart needs a way to keep things completely confidential so only the person or household has access to them. I modeled it after Bitwarden, which my household was using previously, but I wanted it to offer a more flexible method for securing values. I also wanted to use Secrets as a way to add confidential data via Markdown, like in Notes.\nSetup # To start using Secrets, you need to setup your Private Key. Secrets uses your Private Key to encrypt and decrypt values.\nVaults # Secrets \u0026gt; Vaults are a way to organize and protect your Values. Vaults can be either Personal or Household, if you choose Household you can grant access to the Vault to only certain members of your household. Members must have setup their Private Key to be added to a Vault.\nValues # Secrets \u0026gt; Values can be any value or collection of related values that you want to keep secret. Values live within a Vault, where they are encrypted and shared with others who have access to the Vault. Values can have different values, including Timed-based One Time Password (TOTP) generator keys.\nSecurity # Secrets have their own security parameters to ensure everything is performed on the client, on top of the extensive Homechart Security\nSecrets \u0026gt; Values are encrypted using 128-bit AES-GCM via standard Web Crypto APIs. The Encryption Key is encrypted using the 2048-bit RSA-OAEP Public Key of each household member with access to the Vault. The encrypted encryption key is stored with the Vault data. All Secrets \u0026gt; Values within a Secrets \u0026gt; Vault use the same encryption key.\nIntegrations # Secret \u0026gt; Values can be referenced via Markdown in a special way. When you reference them, like #secretsvalue/123, only the people that can decrypt the value will see anything. Additionally, you can reference a specific value by including it in the shortcode, like #secretsvalue/123?username.\n"},{"id":31,"href":"/using-homechart/components/shop/","title":"Shop","section":"Components","content":" Shop # Shop helps you organize your shopping, grocery, and wish lists.\nOur household uses Shop for grocery and general household supplies. After creating our Meal Plan for the week, we add all of the ingredients that aren\u0026rsquo;t in our Inventory to our shopping list. Anytime we are low on something, we add it to Homechart, and for things we use regularly like bread, we create Staples for them. For our Household Projects, we track materials we need like paint, wood, or parts that we need to buy. This setup helps us avoid multiple trips to the store.\nWe also have Lists created for most family members, extended ones included. Throughout the year, we\u0026rsquo;ll add ideas/things they say they wanted, and use the lists for holiday shopping.\nI added Shop to compliment Cook\u0026ndash;with all of these Recipes and Meal Plans, there needed to be an easy way to shop for their ingredients.\nLists # Shop \u0026gt; Lists are how you organize and plan your purchases. Lists contain Shop \u0026gt; Items that you need to buy. You can create Personal or Household Lists, and you can associate Lists with Budget \u0026gt; Categories to see how much money you have saved compared to how much money the items in the list cost.\nPick Up # Pick Up is a special list\u0026ndash;it\u0026rsquo;s stuff that you need to buy ASAP. You\u0026rsquo;ll use the Pick Up list when you go shopping, as it has the things that your household needs in it.\nYou can move Items from a List to Pick Up when you\u0026rsquo;re ready to prioritize purchasing them.\nStores # Shop \u0026gt; Stores are Budget \u0026gt; Payees with the Shopping Store option ticked, thus helping you avoid duplicating entries. You\u0026rsquo;ll use Stores to filter your Pick Up list, so you can easily see what you need when you\u0026rsquo;re at a certain Store.\nCategories # Shop \u0026gt; Categories make shopping easier by sorting Shop \u0026gt; Items into Categories\u0026ndash;these could be Aisles, Departments, etc. When you go to Shop, the Pick Up list will sort the items by Category first.\nCategories work by matching the name of an Item. You can change the existing Categories, and test how they work using Test Categories.\nCategories can also have a default Shop \u0026gt; Store, which will automatically associate Items with Stores.\nItems # Shop \u0026gt; Items are things you need or want to buy. Items can have a Price added to them that will be used to calculate how much a List or Pick Up will cost. Items can also be part of a Category or Store.\nStaples # Shop \u0026gt; Staples are recurring Items. When you create or edit an Item, you can tick Make Staple and set how frequently you need to buy something. For example, if you need to buy bread every 2 weeks, you\u0026rsquo;d set that for the recurrence. Homechart will remember the last time you bought bread, and add bread to your Pick Up list when it\u0026rsquo;s time to buy it again.\nIntegrations # Budget: Shop \u0026gt; Lists can be associated to Budget \u0026gt; Categories so you can save for your wishlists Cook: Shop \u0026gt; Pick Up can include ingredients you need for your Cook \u0026gt; Recipes. Homechart will consult your Inventory and exclude the ones you have in stock. Inventory: Shop \u0026gt; Pick Up can contain Inventory \u0026gt; Items that you need more of Project: Shop \u0026gt; Items can ae associated with Plan \u0026gt; Projects Shop: Shop \u0026gt; Pick Up can have Cook \u0026gt; Meal Plan Ingredients added using Calendar "},{"id":32,"href":"/using-homechart/platform/markdown/","title":"Markdown","section":"Platform","content":" Markdown # You can use Markdown to format text within Homechart. Using Markdown, you can turn things into links, make text bold/italic, creating lists, and more. Here is an overview of the basic Markdown syntax.\nDon\u0026rsquo;t be afraid of Markdown! It\u0026rsquo;s really easy to use, and most things that use Markdown in Homechart have a Preview button so you can view what it looks like before you save. Linking Within Homechart # Homechart can reference various things inside Homechart using Markdown. Using the # symbol, you can create a link or display information about most things within Homechart. When Homechart sees #cookrecipe/acode, it will replace with a link to the Recipe.\n"},{"id":33,"href":"/using-homechart/platform/settings/","title":"Settings","section":"Platform","content":" Settings # Settings are where you manage all of the various controls for Homechart.\nAccount # Settings \u0026gt; Account has controls for adjusting your Preferences, Components, and Security.\nPreferences # You can adjust your account Name, Language, Date, and Time, and Color and Theme under Preferences. Your account Name will be visible to all members of your Household.\nHide Components # Using the controls on this page, you can hide various components within Homechart. You may not be able to un-hide items that are hidden at the household level.\nSecurity # You can setup your Private Key, change your Password, and setup Two-Factor Authentication under Security.\nPrivate Key # You need to generate a Private Key to use Secrets and other encryption components in Homechart. You can generate multiple Private Key Passphrases to store within a safe or somewhere safe.\nHomechart uses 2048-bit RSA-OAEP to generate a Public/Private key-pair. The Private Key is encrypted using 100,000 iterations of PBKDF2 using the Private Key Passphrases as the keys. All encryption is performed using standard Web Crypto APIs.\nNotifications # Settings \u0026gt; Notifications has controls for enabling/disabling different types of Notifications from Homechart.\nSessions # Settings \u0026gt; Sessions lets you delete Sessions, Clear All Sessions, and add new sessions/generate API keys for programmatic usage of Homechart.\nHouseholds # Settings \u0026gt; Households is where you Add, Delete, and Leave households within Homechart. You can be part of many Households, like one for your immediate family and one for your extended family. To use Household features within Homechart, you must be part of at least one Household.\nOne Household will always be your Primary Household. This is the default Household you\u0026rsquo;ll use when you create new Household items. You can change this by tapping the checkbox in the Primary column.\nHousehold Settings # Tapping a Household under Settings \u0026gt; Households shows you controls for adjusting Preferences, Members, and Components.\nPreferences # You can adjust your household Name, Colors, and Currency under Preferences.\nMembers # You can add, remove, and change the permissions of household members under Members.\n"},{"id":34,"href":"/installing-homechart/server/on-your-network/operations/sso/","title":"Single Sign-On (SSO)","section":"Operations","content":" Single Sign-On (SSO) # For self-hosted users, Homechart can integrate with your existing authentication system to allow your household members to authenticate with it or even sign in automatically. Some things to note:\nThe account will be created if the email address does not exist in Homechart already. You should pre-create your household members using the email address that the SSO will pass through, otherwise they will be created under a separate household. If the account already exists in Homechart, Homechart will create a new session for the account associated with the email address that the SSO passes. Please ensure you have properly configured your SSO implementation to avoid malicious users from setting the proxy headers and gaining access to your instance. At a minimum, you must have the appropriate configuration values set for HOMECHART_APP_PROXYADDRESS and HOMECHART_APP_PROXYHEADEREMAIL to enable SSO. Examples # Traefik + Authelia + Homechart # In this example, Traefik sits in front of Homechart and proxies request to it. Authelia is installed and configured for authentication within Traefik. Traefik will check with Authelia to see if the traffic is allowed, and then pass the proxy headers to Homechart. Homechart is configured to look for these proxy headers (Remote-Name, Remote-Email) and source address of Traefik.\nIn this contrived example, Authelia is configured with a local database of users. On your network, you would configure Authelia to use your authentication source, such as LDAP/Active Directory.\nTraefik Dynamic Config (traefik-dynamic.yaml) # http: middlewares: authelia: forwardauth: address: http://localhost:9091/api/verify?rd=https://auth.example.com:8443 authResponseHeaders: - Remote-Name - Remote-Email trustForwardHeader: true routers: authelia: service: authelia rule: \u0026#34;Host(`auth.example.com`)\u0026#34; tls: true homechart: middlewares: - authelia service: homechart rule: \u0026#34;Host(`homechart.example.com`)\u0026#34; tls: true services: authelia: loadBalancer: servers: - url: http://localhost:9091 homechart: loadBalancer: servers: - url: http://localhost:3000 Traefik Command Line # ./traefik --entrypoints.https=true --entrypoints.https.address=:8443 --providers.file.filename=traefik-dynamic.yaml Authelia Config (authelia.yaml) # server: host: 0.0.0.0 port: 9091 log: level: debug jwt_secret: C57E160E9CE711D214BF4CCF407DE6C64FCF19A7C20E7C6D7C2FF18826A7E1AA default_redirection_url: https://auth.example.com:8443 authentication_backend: file: path: ./users.yaml password: algorithm: argon2id iterations: 1 salt_length: 16 parallelism: 8 memory: 1024 # blocks this much of the RAM. Tune this. access_control: default_policy: one_factor session: name: authelia_session domain: example.com storage: encryption_key: superdupersecretsecret local: path: ./db.sqlite3 notifier: filesystem: filename: ./notification.txt Authelia User Config (users.yaml) # users: jane@example.com: displayname: \u0026#34;Jane Doe\u0026#34; password: $argon2id$v=19$m=65536,t=1,p=8$Z2JJSk9qbVlXVk9VWUtQMw$2VqsXXhvTfiHxxvmDUj8GpzPCktmMxdLR2rojFxxknc email: jane@example.com groups: - dev john@example.com: displayname: \u0026#34;John Doe\u0026#34; password: \u0026#34;$argon2id$v=19$m=65536,t=1,p=8$MlplVVhMbzNmcXJmaVVsaA$ydwPNQ5wW3Lu1XuPWhQW7dzlNGP3ynexmzlQmyVMaIY\u0026#34; email: john@example.com groups: - dev Authelia Command Line # ./authelia-linux-amd64 --config authelia.yaml Homechart Command Line # HOMECHART_APP_PROXYADDRESS=[::1] HOMECHART_APP_PROXYHEADEREMAIL=Remote-Email HOMECHART_APP_PROXYHEADERNAME=Remote-Name ./homechart_linux_amd64 -c config.json serve "},{"id":35,"href":"/installing-homechart/server/on-your-network/installation/platform_specific/unraid/","title":"unRAID","section":"Platform Specific","content":" unRAID # Homechart works well on unRAID Servers, but some users frequently encounter issues getting Homechart and PostgreSQL to talk to each other. Here are some tips from our users on getting this working:\nEnsure you\u0026rsquo;re using Docker Set the environment variable HOMECHART_POSTGRESQL_HOSTNAME to the correct hostname or IP address of your PostgreSQL container (make sure to reserve the IP) "}]